{
  "headers": [
    {
      "tool_name": "scanpipe",
      "notice": "Generated with ScanCode.io and provided on an \"AS IS\" BASIS, WITHOUT WARRANTIES\nOR CONDITIONS OF ANY KIND, either express or implied.\nNo content created from ScanCode.io should be considered or used as legal advice.\nConsult an Attorney for any legal advice.\nScanCode.io is a free software code scanning tool from nexB Inc. and others\nlicensed under the Apache License version 2.0.\nScanCode is a trademark of nexB Inc.\nVisit https://github.com/nexB/scancode.io for support and download.\n",
      "input_sources": [
        {
          "filename": "daglib-0.6.0-py3-none-any.whl",
          "source": "https://download.url"
        }
      ],
      "runs": [
        {
          "pipeline_name": "scan_codebase",
          "status": "not_started",
          "description": "Scan a codebase with ScanCode-toolkit.\n\nIf the codebase consists of several packages and dependencies, it will try to\nresolve and scan those too.\n\nInput files are copied to the project's codebase/ directory and are extracted\nin place before running the scan.\nAlternatively, the code can be manually copied to the project codebase/\ndirectory.",
          "scancodeio_version": "",
          "task_id": null,
          "task_start_date": null,
          "task_end_date": null,
          "task_exitcode": null,
          "task_output": "",
          "execution_time": null
        }
      ],
      "extra_data": {}
    }
  ],
  "packages": [
    {
      "purl": "pkg:pypi/daglib@0.6.0",
      "type": "pypi",
      "namespace": "",
      "name": "daglib",
      "version": "0.6.0",
      "qualifiers": "",
      "subpath": "",
      "primary_language": "Python",
      "description": "# \u2697\ufe0f Daglib - Lightweight DAG composition framework\n\n[![PyPI version](https://badge.fury.io/py/daglib.svg)](https://badge.fury.io/py/daglib)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/daglib)](https://pypi.org/project/daglib/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/daglib.svg)](https://pypi.org/project/daglib/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![Checked with mypy](https://img.shields.io/badge/mypy-checked-blue.svg)](https://mypy.readthedocs.io/en/stable/)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n\nDaglib is a lightweight, embeddable parallel task execution library used for turning pure Python functions into executable task graphs.\n\n# Installation\n\nCore\n\n```shell\npip install daglib\n```\n\nWith visualizations enabled\n\n```shell\npip install 'daglib[graphviz]'  # static visualizations\n# or\npip install 'daglib[ipycytoscape]'  # interactive visulizations\n```\n\n# Create your first DAG\n\n\n```python\nimport daglib\n\ndag = daglib.Dag()\n\n\n@dag.task()\ndef task_1a():\n    return \"Hello\"\n\n\n@dag.task()\ndef task_1b():\n    return \"world!\"\n\n\n@dag.task()\ndef task_2(task_1a, task_1b):\n    return f\"{task_1a}, {task_1b}\"\n\n\ndag.run()\n```\n\n\n\n\n    'Hello, world!'\n\n\n\n# Beyond the \"Hello, world!\" example\n\nFor a more involved example, we will create a small pipeline that takes data from four source tables and creates a single reporting table. The data is driver-level information from the current 2022 Formula 1 season. The output will be a pivot table for team-level metrics.\n\n## Source Tables\n\n1. Team - Team of driver\n2. Points - Current total Driver's World Championship points for each driver for the season\n3. Wins - Current number of wins for each driver for the season\n4. Podiums - Current number of times the driver finished in the top 3 for the season\n\n\n```python\nimport pandas as pd\nimport daglib\n\n# Ignore. Used to render the DataFrame correctly in the README\npd.set_option(\"display.notebook_repr_html\", False)\n\ndag = daglib.Dag()\n\n\n@dag.task()\ndef team():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        team=[\"Red Bull\", \"Ferrari\", \"Mercedes\", \"Red Bull\", \"Ferrari\", \"Mercedes\"],\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef points():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        points=[258, 178, 146, 173, 156, 158]\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef wins():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        wins=[8, 3, 0, 1, 1, 0]\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef podiums():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        podiums=[10, 5, 6, 6, 6, 5]\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef driver_metrics(team, points, wins, podiums):\n    return team.join(points).join(wins).join(podiums)\n\n\n@dag.task()\ndef team_metrics(driver_metrics):\n    return driver_metrics.groupby(\"team\").sum().sort_values(\"points\", ascending=False)\n\n\ndag.run()\n```\n\n\n\n\n              points  wins  podiums\n    team\n    Red Bull     431     9       16\n    Ferrari      334     4       11\n    Mercedes     304     0       11\n\n\n\n## Task Graph Visualization\n\nThe DAG we created above will create a task graph that looks like the following\n\n![task graph](https://storage.googleapis.com/daglib-image-assets/example-dag.png)",
      "release_date": null,
      "parties": [
        {
          "url": null,
          "name": "Michael Harris",
          "role": "author",
          "type": "person",
          "email": "mharris@luabase.com"
        }
      ],
      "keywords": [
        "Intended Audience :: Developers",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.10"
      ],
      "homepage_url": "https://github.com/mharrisb1/daglib",
      "download_url": "",
      "bug_tracking_url": "",
      "code_view_url": "",
      "vcs_url": "https://github.com/mharrisb1/daglib",
      "repository_homepage_url": "https://pypi.org/project/daglib",
      "repository_download_url": "https://pypi.org/packages/source/d/daglib/daglib-0.6.0.tar.gz",
      "api_data_url": "https://pypi.org/pypi/daglib/0.6.0/json",
      "md5": "",
      "sha1": "",
      "sha256": "",
      "sha512": "",
      "copyright": "",
      "license_expression": "mit AND mit",
      "declared_license": "{'license': 'MIT', 'classifiers': ['License :: OSI Approved :: MIT License']}",
      "notice_text": "",
      "source_packages": [],
      "extra_data": {
        "Documentation": "https://mharrisb1.github.io/daglib/"
      },
      "package_uid": "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758",
      "manifest_path": "",
      "contains_source_code": null,
      "datasource_id": "",
      "file_references": [],
      "missing_resources": [],
      "modified_resources": []
    },
    {
      "purl": "pkg:pypi/daglib@0.6.0",
      "type": "pypi",
      "namespace": "",
      "name": "daglib",
      "version": "0.6.0",
      "qualifiers": "",
      "subpath": "",
      "primary_language": "Python",
      "description": "# \u2697\ufe0f Daglib - Lightweight DAG composition framework\n\n[![PyPI version](https://badge.fury.io/py/daglib.svg)](https://badge.fury.io/py/daglib)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/daglib)](https://pypi.org/project/daglib/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/daglib.svg)](https://pypi.org/project/daglib/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![Checked with mypy](https://img.shields.io/badge/mypy-checked-blue.svg)](https://mypy.readthedocs.io/en/stable/)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n\nDaglib is a lightweight, embeddable parallel task execution library used for turning pure Python functions into executable task graphs.\n\n# Installation\n\nCore\n\n```shell\npip install daglib\n```\n\nWith visualizations enabled\n\n```shell\npip install 'daglib[graphviz]'  # static visualizations\n# or\npip install 'daglib[ipycytoscape]'  # interactive visulizations\n```\n\n# Create your first DAG\n\n\n```python\nimport daglib\n\ndag = daglib.Dag()\n\n\n@dag.task()\ndef task_1a():\n    return \"Hello\"\n\n\n@dag.task()\ndef task_1b():\n    return \"world!\"\n\n\n@dag.task()\ndef task_2(task_1a, task_1b):\n    return f\"{task_1a}, {task_1b}\"\n\n\ndag.run()\n```\n\n\n\n\n    'Hello, world!'\n\n\n\n# Beyond the \"Hello, world!\" example\n\nFor a more involved example, we will create a small pipeline that takes data from four source tables and creates a single reporting table. The data is driver-level information from the current 2022 Formula 1 season. The output will be a pivot table for team-level metrics.\n\n## Source Tables\n\n1. Team - Team of driver\n2. Points - Current total Driver's World Championship points for each driver for the season\n3. Wins - Current number of wins for each driver for the season\n4. Podiums - Current number of times the driver finished in the top 3 for the season\n\n\n```python\nimport pandas as pd\nimport daglib\n\n# Ignore. Used to render the DataFrame correctly in the README\npd.set_option(\"display.notebook_repr_html\", False)\n\ndag = daglib.Dag()\n\n\n@dag.task()\ndef team():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        team=[\"Red Bull\", \"Ferrari\", \"Mercedes\", \"Red Bull\", \"Ferrari\", \"Mercedes\"],\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef points():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        points=[258, 178, 146, 173, 156, 158]\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef wins():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        wins=[8, 3, 0, 1, 1, 0]\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef podiums():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        podiums=[10, 5, 6, 6, 6, 5]\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef driver_metrics(team, points, wins, podiums):\n    return team.join(points).join(wins).join(podiums)\n\n\n@dag.task()\ndef team_metrics(driver_metrics):\n    return driver_metrics.groupby(\"team\").sum().sort_values(\"points\", ascending=False)\n\n\ndag.run()\n```\n\n\n\n\n              points  wins  podiums\n    team\n    Red Bull     431     9       16\n    Ferrari      334     4       11\n    Mercedes     304     0       11\n\n\n\n## Task Graph Visualization\n\nThe DAG we created above will create a task graph that looks like the following\n\n![task graph](https://storage.googleapis.com/daglib-image-assets/example-dag.png)",
      "release_date": null,
      "parties": [
        {
          "url": null,
          "name": "Michael Harris",
          "role": "author",
          "type": "person",
          "email": "mharris@luabase.com"
        }
      ],
      "keywords": [
        "Intended Audience :: Developers",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.10"
      ],
      "homepage_url": "https://github.com/mharrisb1/daglib",
      "download_url": "",
      "bug_tracking_url": "",
      "code_view_url": "",
      "vcs_url": "https://github.com/mharrisb1/daglib",
      "repository_homepage_url": "https://pypi.org/project/daglib",
      "repository_download_url": "https://pypi.org/packages/source/d/daglib/daglib-0.6.0.tar.gz",
      "api_data_url": "https://pypi.org/pypi/daglib/0.6.0/json",
      "md5": "",
      "sha1": "",
      "sha256": "",
      "sha512": "",
      "copyright": "",
      "license_expression": "mit AND mit",
      "declared_license": "{'license': 'MIT', 'classifiers': ['License :: OSI Approved :: MIT License']}",
      "notice_text": "",
      "source_packages": [],
      "extra_data": {
        "Documentation": "https://mharrisb1.github.io/daglib/"
      },
      "package_uid": "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758",
      "manifest_path": "",
      "contains_source_code": null,
      "datasource_id": "",
      "file_references": [],
      "missing_resources": [],
      "modified_resources": []
    }
  ],
  "dependencies": [
    {
      "purl": "pkg:pypi/dask",
      "extracted_requirement": "dask[delayed]<2023.0.0,>=2022.7.1",
      "scope": "install",
      "is_runtime": true,
      "is_optional": false,
      "is_resolved": false,
      "dependency_uid": "pkg:pypi/dask?uuid=fixed-uid-done-for-testing-5642512d1758",
      "for_package_uid": "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758",
      "datafile_path": "daglib-0.6.0-py3-none-any.whl",
      "datasource_id": "pypi_wheel",
      "package_type": "pypi"
    },
    {
      "purl": "pkg:pypi/dask",
      "extracted_requirement": "dask[delayed]<2023.0.0,>=2022.7.1",
      "scope": "install",
      "is_runtime": true,
      "is_optional": false,
      "is_resolved": false,
      "dependency_uid": "pkg:pypi/dask?uuid=fixed-uid-done-for-testing-5642512d1758",
      "for_package_uid": "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758",
      "datafile_path": "daglib-0.6.0-py3-none-any.whl-extract/daglib-0.6.0.dist-info/METADATA",
      "datasource_id": "pypi_wheel_metadata",
      "package_type": "pypi"
    },
    {
      "purl": "pkg:pypi/graphviz",
      "extracted_requirement": "graphviz<0.21,>=0.20; extra == \"graphviz\"",
      "scope": "graphviz",
      "is_runtime": true,
      "is_optional": true,
      "is_resolved": false,
      "dependency_uid": "pkg:pypi/graphviz?uuid=fixed-uid-done-for-testing-5642512d1758",
      "for_package_uid": "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758",
      "datafile_path": "daglib-0.6.0-py3-none-any.whl",
      "datasource_id": "pypi_wheel",
      "package_type": "pypi"
    },
    {
      "purl": "pkg:pypi/graphviz",
      "extracted_requirement": "graphviz<0.21,>=0.20; extra == \"graphviz\"",
      "scope": "graphviz",
      "is_runtime": true,
      "is_optional": true,
      "is_resolved": false,
      "dependency_uid": "pkg:pypi/graphviz?uuid=fixed-uid-done-for-testing-5642512d1758",
      "for_package_uid": "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758",
      "datafile_path": "daglib-0.6.0-py3-none-any.whl-extract/daglib-0.6.0.dist-info/METADATA",
      "datasource_id": "pypi_wheel_metadata",
      "package_type": "pypi"
    },
    {
      "purl": "pkg:pypi/ipycytoscape",
      "extracted_requirement": "ipycytoscape<2.0.0,>=1.3.3; extra == \"ipycytoscape\"",
      "scope": "ipycytoscape",
      "is_runtime": true,
      "is_optional": true,
      "is_resolved": false,
      "dependency_uid": "pkg:pypi/ipycytoscape?uuid=fixed-uid-done-for-testing-5642512d1758",
      "for_package_uid": "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758",
      "datafile_path": "daglib-0.6.0-py3-none-any.whl",
      "datasource_id": "pypi_wheel",
      "package_type": "pypi"
    },
    {
      "purl": "pkg:pypi/ipycytoscape",
      "extracted_requirement": "ipycytoscape<2.0.0,>=1.3.3; extra == \"ipycytoscape\"",
      "scope": "ipycytoscape",
      "is_runtime": true,
      "is_optional": true,
      "is_resolved": false,
      "dependency_uid": "pkg:pypi/ipycytoscape?uuid=fixed-uid-done-for-testing-5642512d1758",
      "for_package_uid": "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758",
      "datafile_path": "daglib-0.6.0-py3-none-any.whl-extract/daglib-0.6.0.dist-info/METADATA",
      "datasource_id": "pypi_wheel_metadata",
      "package_type": "pypi"
    },
    {
      "purl": "pkg:pypi/networkx",
      "extracted_requirement": "networkx<3.0.0,>=2.8.5",
      "scope": "install",
      "is_runtime": true,
      "is_optional": false,
      "is_resolved": false,
      "dependency_uid": "pkg:pypi/networkx?uuid=fixed-uid-done-for-testing-5642512d1758",
      "for_package_uid": "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758",
      "datafile_path": "daglib-0.6.0-py3-none-any.whl",
      "datasource_id": "pypi_wheel",
      "package_type": "pypi"
    },
    {
      "purl": "pkg:pypi/networkx",
      "extracted_requirement": "networkx<3.0.0,>=2.8.5",
      "scope": "install",
      "is_runtime": true,
      "is_optional": false,
      "is_resolved": false,
      "dependency_uid": "pkg:pypi/networkx?uuid=fixed-uid-done-for-testing-5642512d1758",
      "for_package_uid": "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758",
      "datafile_path": "daglib-0.6.0-py3-none-any.whl-extract/daglib-0.6.0.dist-info/METADATA",
      "datasource_id": "pypi_wheel_metadata",
      "package_type": "pypi"
    }
  ],
  "files": [
    {
      "path": "daglib-0.6.0-py3-none-any.whl",
      "type": "file",
      "name": "daglib-0.6.0-py3-none-any.whl",
      "status": "application-package",
      "tag": "",
      "extension": ".whl",
      "md5": "446d173b9232562ef937613c4f01c7c2",
      "sha1": "a0beade4f742e19325737079c6cd1260ee095f92",
      "sha256": "c80c670746e8c8cf2d3c738b20e85c01f0be77fc79c025d6af7dc9aea47f5265",
      "sha512": "",
      "programming_language": "",
      "is_binary": true,
      "is_text": false,
      "is_archive": true,
      "is_media": false,
      "is_key_file": false,
      "licenses": [],
      "license_expressions": [],
      "copyrights": [],
      "holders": [],
      "authors": [],
      "package_data": [
        {
          "md5": null,
          "name": "daglib",
          "purl": "pkg:pypi/daglib@0.6.0",
          "sha1": null,
          "type": "pypi",
          "sha256": null,
          "sha512": null,
          "parties": [
            {
              "url": null,
              "name": "Michael Harris",
              "role": "author",
              "type": "person",
              "email": "mharris@luabase.com"
            }
          ],
          "subpath": null,
          "vcs_url": "https://github.com/mharrisb1/daglib",
          "version": "0.6.0",
          "keywords": [
            "Intended Audience :: Developers",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.10"
          ],
          "copyright": null,
          "namespace": null,
          "extra_data": {
            "Documentation": "https://mharrisb1.github.io/daglib/"
          },
          "qualifiers": {},
          "description": "# \u2697\ufe0f Daglib - Lightweight DAG composition framework\n\n[![PyPI version](https://badge.fury.io/py/daglib.svg)](https://badge.fury.io/py/daglib)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/daglib)](https://pypi.org/project/daglib/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/daglib.svg)](https://pypi.org/project/daglib/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![Checked with mypy](https://img.shields.io/badge/mypy-checked-blue.svg)](https://mypy.readthedocs.io/en/stable/)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n\nDaglib is a lightweight, embeddable parallel task execution library used for turning pure Python functions into executable task graphs.\n\n# Installation\n\nCore\n\n```shell\npip install daglib\n```\n\nWith visualizations enabled\n\n```shell\npip install 'daglib[graphviz]'  # static visualizations\n# or\npip install 'daglib[ipycytoscape]'  # interactive visulizations\n```\n\n# Create your first DAG\n\n\n```python\nimport daglib\n\ndag = daglib.Dag()\n\n\n@dag.task()\ndef task_1a():\n    return \"Hello\"\n\n\n@dag.task()\ndef task_1b():\n    return \"world!\"\n\n\n@dag.task()\ndef task_2(task_1a, task_1b):\n    return f\"{task_1a}, {task_1b}\"\n\n\ndag.run()\n```\n\n\n\n\n    'Hello, world!'\n\n\n\n# Beyond the \"Hello, world!\" example\n\nFor a more involved example, we will create a small pipeline that takes data from four source tables and creates a single reporting table. The data is driver-level information from the current 2022 Formula 1 season. The output will be a pivot table for team-level metrics.\n\n## Source Tables\n\n1. Team - Team of driver\n2. Points - Current total Driver's World Championship points for each driver for the season\n3. Wins - Current number of wins for each driver for the season\n4. Podiums - Current number of times the driver finished in the top 3 for the season\n\n\n```python\nimport pandas as pd\nimport daglib\n\n# Ignore. Used to render the DataFrame correctly in the README\npd.set_option(\"display.notebook_repr_html\", False)\n\ndag = daglib.Dag()\n\n\n@dag.task()\ndef team():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        team=[\"Red Bull\", \"Ferrari\", \"Mercedes\", \"Red Bull\", \"Ferrari\", \"Mercedes\"],\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef points():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        points=[258, 178, 146, 173, 156, 158]\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef wins():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        wins=[8, 3, 0, 1, 1, 0]\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef podiums():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        podiums=[10, 5, 6, 6, 6, 5]\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef driver_metrics(team, points, wins, podiums):\n    return team.join(points).join(wins).join(podiums)\n\n\n@dag.task()\ndef team_metrics(driver_metrics):\n    return driver_metrics.groupby(\"team\").sum().sort_values(\"points\", ascending=False)\n\n\ndag.run()\n```\n\n\n\n\n              points  wins  podiums\n    team\n    Red Bull     431     9       16\n    Ferrari      334     4       11\n    Mercedes     304     0       11\n\n\n\n## Task Graph Visualization\n\nThe DAG we created above will create a task graph that looks like the following\n\n![task graph](https://storage.googleapis.com/daglib-image-assets/example-dag.png)",
          "notice_text": null,
          "api_data_url": "https://pypi.org/pypi/daglib/0.6.0/json",
          "dependencies": [
            {
              "purl": "pkg:pypi/dask",
              "scope": "install",
              "extra_data": {},
              "is_runtime": true,
              "is_optional": false,
              "is_resolved": false,
              "resolved_package": {},
              "extracted_requirement": "dask[delayed]<2023.0.0,>=2022.7.1"
            },
            {
              "purl": "pkg:pypi/graphviz",
              "scope": "graphviz",
              "extra_data": {},
              "is_runtime": true,
              "is_optional": true,
              "is_resolved": false,
              "resolved_package": {},
              "extracted_requirement": "graphviz<0.21,>=0.20; extra == \"graphviz\""
            },
            {
              "purl": "pkg:pypi/ipycytoscape",
              "scope": "ipycytoscape",
              "extra_data": {},
              "is_runtime": true,
              "is_optional": true,
              "is_resolved": false,
              "resolved_package": {},
              "extracted_requirement": "ipycytoscape<2.0.0,>=1.3.3; extra == \"ipycytoscape\""
            },
            {
              "purl": "pkg:pypi/networkx",
              "scope": "install",
              "extra_data": {},
              "is_runtime": true,
              "is_optional": false,
              "is_resolved": false,
              "resolved_package": {},
              "extracted_requirement": "networkx<3.0.0,>=2.8.5"
            }
          ],
          "download_url": null,
          "homepage_url": "https://github.com/mharrisb1/daglib",
          "release_date": null,
          "code_view_url": null,
          "datasource_id": "pypi_wheel",
          "file_references": [
            {
              "md5": null,
              "path": "daglib/__init__.py",
              "sha1": null,
              "sha256": "cd90a1522c161cf60c8981d6a5a9348c732dd3532b2da2a3b508dd1e3a8a6773",
              "sha512": null,
              "extra_data": {}
            },
            {
              "md5": null,
              "path": "daglib/dag.py",
              "sha1": null,
              "sha256": "dbd566e03890a1c57ab5256ef696495193e6a9cf90ec4ba31d4ef10f8a8f25a6",
              "sha512": null,
              "extra_data": {}
            },
            {
              "md5": null,
              "path": "daglib/task.py",
              "sha1": null,
              "sha256": "a2e59ff7bf4853a38a8298fa8f8df4d41db0a38eb09132a392416bd89a7ec63d",
              "sha512": null,
              "extra_data": {}
            },
            {
              "md5": null,
              "path": "daglib-0.6.0.dist-info/LICENSE",
              "sha1": null,
              "sha256": "f9352835d15f73e2d01bae747b6ce3386a23be2fb73c06df799fba97a5bc98a2",
              "sha512": null,
              "extra_data": {}
            },
            {
              "md5": null,
              "path": "daglib-0.6.0.dist-info/WHEEL",
              "sha1": null,
              "sha256": "0c0f3afe1e10c30cc6791a33eb6a35b2f62de641845e9a144ee4edc33a136f7d",
              "sha512": null,
              "extra_data": {}
            },
            {
              "md5": null,
              "path": "daglib-0.6.0.dist-info/METADATA",
              "sha1": null,
              "sha256": "f01ba45128006ed4748cef8bd1e7f66bd4b5f86f1a657e3f3e4fee3a4d328cf2",
              "sha512": null,
              "extra_data": {}
            },
            {
              "md5": null,
              "path": "daglib-0.6.0.dist-info/RECORD",
              "sha1": null,
              "sha256": null,
              "sha512": null,
              "extra_data": {}
            }
          ],
          "source_packages": [],
          "bug_tracking_url": null,
          "declared_license": {
            "license": "MIT",
            "classifiers": [
              "License :: OSI Approved :: MIT License"
            ]
          },
          "primary_language": "Python",
          "license_expression": "mit AND mit",
          "repository_download_url": "https://pypi.org/packages/source/d/daglib/daglib-0.6.0.tar.gz",
          "repository_homepage_url": "https://pypi.org/project/daglib"
        }
      ],
      "for_packages": [
        "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758"
      ],
      "emails": [],
      "urls": [],
      "extra_data": {}
    },
    {
      "path": "daglib-0.6.0-py3-none-any.whl-extract",
      "type": "directory",
      "name": "daglib-0.6.0-py3-none-any.whl-extract",
      "status": "scanned",
      "tag": "",
      "extension": ".whl-extract",
      "md5": "",
      "sha1": "",
      "sha256": "",
      "sha512": "",
      "programming_language": "",
      "is_binary": false,
      "is_text": false,
      "is_archive": false,
      "is_media": false,
      "is_key_file": false,
      "licenses": [],
      "license_expressions": [],
      "copyrights": [],
      "holders": [],
      "authors": [],
      "package_data": [],
      "for_packages": [],
      "emails": [],
      "urls": [],
      "extra_data": {}
    },
    {
      "path": "daglib-0.6.0-py3-none-any.whl-extract/daglib",
      "type": "directory",
      "name": "daglib",
      "status": "scanned",
      "tag": "",
      "extension": "",
      "md5": "",
      "sha1": "",
      "sha256": "",
      "sha512": "",
      "programming_language": "",
      "is_binary": false,
      "is_text": false,
      "is_archive": false,
      "is_media": false,
      "is_key_file": false,
      "licenses": [],
      "license_expressions": [],
      "copyrights": [],
      "holders": [],
      "authors": [],
      "package_data": [],
      "for_packages": [],
      "emails": [],
      "urls": [],
      "extra_data": {}
    },
    {
      "path": "daglib-0.6.0-py3-none-any.whl-extract/daglib-0.6.0.dist-info",
      "type": "directory",
      "name": "daglib-0.6.0.dist-info",
      "status": "scanned",
      "tag": "",
      "extension": ".dist-info",
      "md5": "",
      "sha1": "",
      "sha256": "",
      "sha512": "",
      "programming_language": "",
      "is_binary": false,
      "is_text": false,
      "is_archive": false,
      "is_media": false,
      "is_key_file": false,
      "licenses": [],
      "license_expressions": [],
      "copyrights": [],
      "holders": [],
      "authors": [],
      "package_data": [],
      "for_packages": [],
      "emails": [],
      "urls": [],
      "extra_data": {}
    },
    {
      "path": "daglib-0.6.0-py3-none-any.whl-extract/daglib-0.6.0.dist-info/LICENSE",
      "type": "file",
      "name": "LICENSE",
      "status": "scanned",
      "tag": "",
      "extension": "",
      "md5": "d167c3ff439cea92af70859d34aed897",
      "sha1": "033f29a9740f1e33dcb95c0d57c3701074986b58",
      "sha256": "f9352835d15f73e2d01bae747b6ce3386a23be2fb73c06df799fba97a5bc98a2",
      "sha512": "",
      "programming_language": "",
      "is_binary": false,
      "is_text": true,
      "is_archive": false,
      "is_media": false,
      "is_key_file": false,
      "licenses": [
        {
          "key": "mit",
          "name": "MIT License",
          "owner": "MIT",
          "score": 100.0,
          "category": "Permissive",
          "end_line": 19,
          "spdx_url": "https://spdx.org/licenses/MIT",
          "text_url": "http://opensource.org/licenses/mit-license.php",
          "is_unknown": false,
          "short_name": "MIT License",
          "start_line": 3,
          "homepage_url": "http://opensource.org/licenses/mit-license.php",
          "is_exception": false,
          "matched_rule": {
            "matcher": "2-aho",
            "licenses": [
              "mit"
            ],
            "identifier": "mit.LICENSE",
            "has_unknown": false,
            "rule_length": 161,
            "is_license_tag": false,
            "match_coverage": 100.0,
            "matched_length": 161,
            "rule_relevance": 100,
            "is_license_text": true,
            "is_license_intro": false,
            "is_license_notice": false,
            "license_expression": "mit",
            "is_license_reference": false,
            "referenced_filenames": []
          },
          "matched_text": "Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
          "reference_url": "https://scancode-licensedb.aboutcode.org/mit",
          "spdx_license_key": "MIT",
          "scancode_data_url": "https://github.com/nexB/scancode-toolkit/tree/develop/src/licensedcode/data/licenses/mit.yml",
          "scancode_text_url": "https://github.com/nexB/scancode-toolkit/tree/develop/src/licensedcode/data/licenses/mit.LICENSE"
        }
      ],
      "license_expressions": [
        "mit"
      ],
      "copyrights": [
        {
          "end_line": 1,
          "copyright": "Copyright (c) 2022 Michael Harris",
          "start_line": 1
        }
      ],
      "holders": [
        {
          "holder": "Michael Harris",
          "end_line": 1,
          "start_line": 1
        }
      ],
      "authors": [],
      "package_data": [],
      "for_packages": [
        "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758"
      ],
      "emails": [],
      "urls": [],
      "extra_data": {}
    },
    {
      "path": "daglib-0.6.0-py3-none-any.whl-extract/daglib-0.6.0.dist-info/METADATA",
      "type": "file",
      "name": "METADATA",
      "status": "application-package",
      "tag": "",
      "extension": "",
      "md5": "b6d025c596a6b970c121819e0719b6be",
      "sha1": "e683bb3db97ada2163e5115f636a8615f6db71d0",
      "sha256": "f01ba45128006ed4748cef8bd1e7f66bd4b5f86f1a657e3f3e4fee3a4d328cf2",
      "sha512": "",
      "programming_language": "Objective-C",
      "is_binary": false,
      "is_text": true,
      "is_archive": false,
      "is_media": false,
      "is_key_file": false,
      "licenses": [],
      "license_expressions": [],
      "copyrights": [],
      "holders": [],
      "authors": [],
      "package_data": [
        {
          "md5": null,
          "name": "daglib",
          "purl": "pkg:pypi/daglib@0.6.0",
          "sha1": null,
          "type": "pypi",
          "sha256": null,
          "sha512": null,
          "parties": [
            {
              "url": null,
              "name": "Michael Harris",
              "role": "author",
              "type": "person",
              "email": "mharris@luabase.com"
            }
          ],
          "subpath": null,
          "vcs_url": "https://github.com/mharrisb1/daglib",
          "version": "0.6.0",
          "keywords": [
            "Intended Audience :: Developers",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.10"
          ],
          "copyright": null,
          "namespace": null,
          "extra_data": {
            "Documentation": "https://mharrisb1.github.io/daglib/"
          },
          "qualifiers": {},
          "description": "# \u2697\ufe0f Daglib - Lightweight DAG composition framework\n\n[![PyPI version](https://badge.fury.io/py/daglib.svg)](https://badge.fury.io/py/daglib)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/daglib)](https://pypi.org/project/daglib/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/daglib.svg)](https://pypi.org/project/daglib/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![Checked with mypy](https://img.shields.io/badge/mypy-checked-blue.svg)](https://mypy.readthedocs.io/en/stable/)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n\nDaglib is a lightweight, embeddable parallel task execution library used for turning pure Python functions into executable task graphs.\n\n# Installation\n\nCore\n\n```shell\npip install daglib\n```\n\nWith visualizations enabled\n\n```shell\npip install 'daglib[graphviz]'  # static visualizations\n# or\npip install 'daglib[ipycytoscape]'  # interactive visulizations\n```\n\n# Create your first DAG\n\n\n```python\nimport daglib\n\ndag = daglib.Dag()\n\n\n@dag.task()\ndef task_1a():\n    return \"Hello\"\n\n\n@dag.task()\ndef task_1b():\n    return \"world!\"\n\n\n@dag.task()\ndef task_2(task_1a, task_1b):\n    return f\"{task_1a}, {task_1b}\"\n\n\ndag.run()\n```\n\n\n\n\n    'Hello, world!'\n\n\n\n# Beyond the \"Hello, world!\" example\n\nFor a more involved example, we will create a small pipeline that takes data from four source tables and creates a single reporting table. The data is driver-level information from the current 2022 Formula 1 season. The output will be a pivot table for team-level metrics.\n\n## Source Tables\n\n1. Team - Team of driver\n2. Points - Current total Driver's World Championship points for each driver for the season\n3. Wins - Current number of wins for each driver for the season\n4. Podiums - Current number of times the driver finished in the top 3 for the season\n\n\n```python\nimport pandas as pd\nimport daglib\n\n# Ignore. Used to render the DataFrame correctly in the README\npd.set_option(\"display.notebook_repr_html\", False)\n\ndag = daglib.Dag()\n\n\n@dag.task()\ndef team():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        team=[\"Red Bull\", \"Ferrari\", \"Mercedes\", \"Red Bull\", \"Ferrari\", \"Mercedes\"],\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef points():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        points=[258, 178, 146, 173, 156, 158]\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef wins():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        wins=[8, 3, 0, 1, 1, 0]\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef podiums():\n    return pd.DataFrame(dict(\n        driver=[\"Max\", \"Charles\", \"Lewis\", \"Sergio\", \"Carlos\", \"George\"],\n        podiums=[10, 5, 6, 6, 6, 5]\n    )).set_index(\"driver\")\n\n\n@dag.task()\ndef driver_metrics(team, points, wins, podiums):\n    return team.join(points).join(wins).join(podiums)\n\n\n@dag.task()\ndef team_metrics(driver_metrics):\n    return driver_metrics.groupby(\"team\").sum().sort_values(\"points\", ascending=False)\n\n\ndag.run()\n```\n\n\n\n\n              points  wins  podiums\n    team\n    Red Bull     431     9       16\n    Ferrari      334     4       11\n    Mercedes     304     0       11\n\n\n\n## Task Graph Visualization\n\nThe DAG we created above will create a task graph that looks like the following\n\n![task graph](https://storage.googleapis.com/daglib-image-assets/example-dag.png)",
          "notice_text": null,
          "api_data_url": "https://pypi.org/pypi/daglib/0.6.0/json",
          "dependencies": [
            {
              "purl": "pkg:pypi/dask",
              "scope": "install",
              "extra_data": {},
              "is_runtime": true,
              "is_optional": false,
              "is_resolved": false,
              "resolved_package": {},
              "extracted_requirement": "dask[delayed]<2023.0.0,>=2022.7.1"
            },
            {
              "purl": "pkg:pypi/graphviz",
              "scope": "graphviz",
              "extra_data": {},
              "is_runtime": true,
              "is_optional": true,
              "is_resolved": false,
              "resolved_package": {},
              "extracted_requirement": "graphviz<0.21,>=0.20; extra == \"graphviz\""
            },
            {
              "purl": "pkg:pypi/ipycytoscape",
              "scope": "ipycytoscape",
              "extra_data": {},
              "is_runtime": true,
              "is_optional": true,
              "is_resolved": false,
              "resolved_package": {},
              "extracted_requirement": "ipycytoscape<2.0.0,>=1.3.3; extra == \"ipycytoscape\""
            },
            {
              "purl": "pkg:pypi/networkx",
              "scope": "install",
              "extra_data": {},
              "is_runtime": true,
              "is_optional": false,
              "is_resolved": false,
              "resolved_package": {},
              "extracted_requirement": "networkx<3.0.0,>=2.8.5"
            }
          ],
          "download_url": null,
          "homepage_url": "https://github.com/mharrisb1/daglib",
          "release_date": null,
          "code_view_url": null,
          "datasource_id": "pypi_wheel_metadata",
          "file_references": [
            {
              "md5": null,
              "path": "daglib/__init__.py",
              "sha1": null,
              "sha256": "cd90a1522c161cf60c8981d6a5a9348c732dd3532b2da2a3b508dd1e3a8a6773",
              "sha512": null,
              "extra_data": {}
            },
            {
              "md5": null,
              "path": "daglib/dag.py",
              "sha1": null,
              "sha256": "dbd566e03890a1c57ab5256ef696495193e6a9cf90ec4ba31d4ef10f8a8f25a6",
              "sha512": null,
              "extra_data": {}
            },
            {
              "md5": null,
              "path": "daglib/task.py",
              "sha1": null,
              "sha256": "a2e59ff7bf4853a38a8298fa8f8df4d41db0a38eb09132a392416bd89a7ec63d",
              "sha512": null,
              "extra_data": {}
            },
            {
              "md5": null,
              "path": "daglib-0.6.0.dist-info/LICENSE",
              "sha1": null,
              "sha256": "f9352835d15f73e2d01bae747b6ce3386a23be2fb73c06df799fba97a5bc98a2",
              "sha512": null,
              "extra_data": {}
            },
            {
              "md5": null,
              "path": "daglib-0.6.0.dist-info/WHEEL",
              "sha1": null,
              "sha256": "0c0f3afe1e10c30cc6791a33eb6a35b2f62de641845e9a144ee4edc33a136f7d",
              "sha512": null,
              "extra_data": {}
            },
            {
              "md5": null,
              "path": "daglib-0.6.0.dist-info/METADATA",
              "sha1": null,
              "sha256": "f01ba45128006ed4748cef8bd1e7f66bd4b5f86f1a657e3f3e4fee3a4d328cf2",
              "sha512": null,
              "extra_data": {}
            },
            {
              "md5": null,
              "path": "daglib-0.6.0.dist-info/RECORD",
              "sha1": null,
              "sha256": null,
              "sha512": null,
              "extra_data": {}
            }
          ],
          "source_packages": [],
          "bug_tracking_url": null,
          "declared_license": {
            "license": "MIT",
            "classifiers": [
              "License :: OSI Approved :: MIT License"
            ]
          },
          "primary_language": "Python",
          "license_expression": "mit AND mit",
          "repository_download_url": "https://pypi.org/packages/source/d/daglib/daglib-0.6.0.tar.gz",
          "repository_homepage_url": "https://pypi.org/project/daglib"
        }
      ],
      "for_packages": [
        "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758"
      ],
      "emails": [],
      "urls": [],
      "extra_data": {}
    },
    {
      "path": "daglib-0.6.0-py3-none-any.whl-extract/daglib-0.6.0.dist-info/RECORD",
      "type": "file",
      "name": "RECORD",
      "status": "scanned",
      "tag": "",
      "extension": "",
      "md5": "6e7c8276d7fe53c903a77ac4c00e61d7",
      "sha1": "4cee5b608fade83855ba958588a668260072430a",
      "sha256": "7ab90325b761f578f47410c7e954afdbaf9ce3ca7c1c5a7ab3a7e6b4401a6aee",
      "sha512": "",
      "programming_language": "",
      "is_binary": false,
      "is_text": true,
      "is_archive": false,
      "is_media": false,
      "is_key_file": false,
      "licenses": [],
      "license_expressions": [],
      "copyrights": [],
      "holders": [],
      "authors": [],
      "package_data": [],
      "for_packages": [
        "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758"
      ],
      "emails": [],
      "urls": [],
      "extra_data": {}
    },
    {
      "path": "daglib-0.6.0-py3-none-any.whl-extract/daglib-0.6.0.dist-info/WHEEL",
      "type": "file",
      "name": "WHEEL",
      "status": "scanned",
      "tag": "",
      "extension": "",
      "md5": "64322d7290e1ba514f9de548e3f03673",
      "sha1": "0739047eea2adc0c72fa36135e17d2bda3fb9e19",
      "sha256": "0c0f3afe1e10c30cc6791a33eb6a35b2f62de641845e9a144ee4edc33a136f7d",
      "sha512": "",
      "programming_language": "",
      "is_binary": false,
      "is_text": true,
      "is_archive": false,
      "is_media": false,
      "is_key_file": false,
      "licenses": [],
      "license_expressions": [],
      "copyrights": [],
      "holders": [],
      "authors": [],
      "package_data": [],
      "for_packages": [
        "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758"
      ],
      "emails": [],
      "urls": [],
      "extra_data": {}
    },
    {
      "path": "daglib-0.6.0-py3-none-any.whl-extract/daglib/__init__.py",
      "type": "file",
      "name": "__init__.py",
      "status": "scanned",
      "tag": "",
      "extension": ".py",
      "md5": "d5fc9dbac53ceb30cd852b51fa2500af",
      "sha1": "156b1f143544a16b1325e3c0ac364b8eba1cf4cc",
      "sha256": "cd90a1522c161cf60c8981d6a5a9348c732dd3532b2da2a3b508dd1e3a8a6773",
      "sha512": "",
      "programming_language": "Python",
      "is_binary": false,
      "is_text": true,
      "is_archive": false,
      "is_media": false,
      "is_key_file": false,
      "licenses": [],
      "license_expressions": [],
      "copyrights": [],
      "holders": [],
      "authors": [],
      "package_data": [],
      "for_packages": [
        "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758"
      ],
      "emails": [],
      "urls": [],
      "extra_data": {}
    },
    {
      "path": "daglib-0.6.0-py3-none-any.whl-extract/daglib/dag.py",
      "type": "file",
      "name": "dag.py",
      "status": "scanned",
      "tag": "",
      "extension": ".py",
      "md5": "fe986e593ce13cee742c9f79074626a3",
      "sha1": "6f4b1cd310f92aca0e98707b3a910bd46abd275e",
      "sha256": "dbd566e03890a1c57ab5256ef696495193e6a9cf90ec4ba31d4ef10f8a8f25a6",
      "sha512": "",
      "programming_language": "Python",
      "is_binary": false,
      "is_text": true,
      "is_archive": false,
      "is_media": false,
      "is_key_file": false,
      "licenses": [],
      "license_expressions": [],
      "copyrights": [],
      "holders": [],
      "authors": [],
      "package_data": [],
      "for_packages": [
        "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758"
      ],
      "emails": [],
      "urls": [],
      "extra_data": {}
    },
    {
      "path": "daglib-0.6.0-py3-none-any.whl-extract/daglib/task.py",
      "type": "file",
      "name": "task.py",
      "status": "scanned",
      "tag": "",
      "extension": ".py",
      "md5": "b096ad2f14b4a7aff65a7f9398e9cb7d",
      "sha1": "e33b2651f91dccd8b750ccccd9c19e2c14aff343",
      "sha256": "a2e59ff7bf4853a38a8298fa8f8df4d41db0a38eb09132a392416bd89a7ec63d",
      "sha512": "",
      "programming_language": "Python",
      "is_binary": false,
      "is_text": true,
      "is_archive": false,
      "is_media": false,
      "is_key_file": false,
      "licenses": [],
      "license_expressions": [],
      "copyrights": [],
      "holders": [],
      "authors": [],
      "package_data": [],
      "for_packages": [
        "pkg:pypi/daglib@0.6.0?uuid=fixed-uid-done-for-testing-5642512d1758"
      ],
      "emails": [],
      "urls": [],
      "extra_data": {}
    }
  ]
}