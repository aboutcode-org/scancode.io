# SPDX-License-Identifier: Apache-2.0
#
# http://nexb.com and https://github.com/nexB/scancode.io
# The ScanCode.io software is licensed under the Apache License version 2.0.
# Data generated with ScanCode.io is provided as-is without warranties.
# ScanCode is a trademark of nexB Inc.
#
# You may not use this software except in compliance with the License.
# You may obtain a copy of the License at: http://apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
#
# Data Generated with ScanCode.io is provided on an "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied. No content created from
# ScanCode.io should be considered or used as legal advice. Consult an Attorney
# for any legal advice.
#
# ScanCode.io is a free software code scanning tool from nexB Inc. and others.
# Visit https://github.com/nexB/scancode.io for support and download.


from django.test import TestCase

from scanpipe.pipes import stringmap


class ScanPipeStringmapPipesTest(TestCase):
    def test_match_source_strings_to_deployed_unmatched(self):
        deployed_strings = [
            "must be non-object",
            "function",
            "function",
            "need dictionary",
            "stream end",
            "-1",
            "file error",
            "-2",
            "stream error",
            "data error",
            "insufficient memory",
            "buffer error",
            "invalid stored block lengths",
            "too many length or distance symbols",
        ]

        source_strings = [
            "incorrect header check",
            "unknown compression method",
            "invalid window size",
            "unknown compression method",
            "unknown header flags set",
            "header crc mismatch",
            "invalid block type",
            "invalid stored block lengths",
            "too many length or distance symbols",
            "invalid code lengths set",
            "invalid bit length repeat",
            "invalid bit length repeat",
            "invalid code -- missing end-of-block",
            "invalid literal/lengths set",
        ]
        is_source_matched, score = stringmap.match_source_strings_to_deployed(
            source_strings,
            deployed_strings,
        )
        self.assertFalse(is_source_matched)
        self.assertAlmostEqual(score, 0.1428, places=3)

    def test_match_source_strings_to_deployed_matched(self):
        deployed_strings = [
            "object",
            "u",
            "function",
            "exports",
            "u",
            "use strict",
            "invalid literal/length code",
            "invalid distance code",
            "invalid distance too far back",
            "invalid distance too far back",
            "incorrect header check",
            "unknown compression method",
            "invalid window size",
            "unknown compression method",
            "unknown header flags set",
            "header crc mismatch",
            "invalid block type",
            "invalid stored block lengths",
            "too many length or distance symbols",
            "invalid code lengths set",
            "invalid bit length repeat",
            "invalid bit length repeat",
            "invalid code -- missing end-of-block",
            "invalid literal/lengths set",
            "invalid distances set",
            "invalid literal/length code",
            "invalid distance code",
            "invalid distance too far back",
            "invalid distance too far back",
            "incorrect data check",
            "incorrect length check",
            "pako inflate (from Nodeca project)",
            "object",
            "must be non-object",
            "function",
            "function",
            "need dictionary",
            "stream end",
            "-1",
            "file error",
            "-2",
            "stream error",
            "-3",
            "data error",
            "-4",
            "insufficient memory",
            "-5",
            "buffer error",
            "-6",
            "incompatible version",
            "string",
            "'[object ArrayBuffer]'",
            "'[object ArrayBuffer]'",
            "string",
            "string",
            "__esModule",
        ]

        source_strings = [
            "object",
            "undefined",
            "function",
            "undefined",
            "undefined",
            "undefined",
            "function",
            "Cannot find module '",
            "MODULE_NOT_FOUND",
            "function",
            "use strict",
            "string",
            "'[object ArrayBuffer]'",
            "./zlib/deflate",
            "./utils/common",
            "./utils/strings",
            "./zlib/messages",
            "./zlib/zstream",
            "string",
            "'[object ArrayBuffer]'",
            "string",
            "string",
            "./utils/common",
            "./utils/strings",
            "./zlib/deflate",
            "./zlib/messages",
            "./zlib/zstream",
            "use strict",
            "./zlib/inflate",
            "./utils/common",
            "./utils/strings",
            "./zlib/constants",
            "./zlib/messages",
            "./zlib/zstream",
            "./zlib/gzheader",
            "string",
            "'[object ArrayBuffer]'",
            "string",
            "'[object ArrayBuffer]'",
            "string",
            "string",
            "./utils/common",
            "./utils/strings",
            "./zlib/constants",
            "./zlib/gzheader",
            "./zlib/inflate",
            "./zlib/messages",
            "./zlib/zstream",
            "use strict",
            "undefined",
            "undefined",
            "undefined",
            "object",
            "must be non-object",
            "use strict",
            "./common",
            "./common",
            "use strict",
            "use strict",
            "use strict",
            "use strict",
            "../utils/common",
            "./trees",
            "./adler32",
            "./crc32",
            "./messages",
            "pako deflate (from Nodeca project)",
            "../utils/common",
            "./adler32",
            "./crc32",
            "./messages",
            "./trees",
            "use strict",
            "use strict",
            "invalid literal/length code",
            "invalid distance code",
            "invalid distance too far back",
            "invalid distance too far back",
            "use strict",
            "../utils/common",
            "./adler32",
            "./crc32",
            "./inffast",
            "./inftrees",
            "incorrect header check",
            "unknown compression method",
            "invalid window size",
            "unknown compression method",
            "unknown header flags set",
            "header crc mismatch",
            "invalid block type",
            "invalid stored block lengths",
            "too many length or distance symbols",
            "invalid code lengths set",
            "invalid bit length repeat",
            "invalid bit length repeat",
            "invalid code -- missing end-of-block",
            "invalid literal/lengths set",
            "invalid distances set",
            "invalid literal/length code",
            "invalid distance code",
            "invalid distance too far back",
            "invalid distance too far back",
            "incorrect data check",
            "incorrect length check",
            "pako inflate (from Nodeca project)",
            "../utils/common",
            "./adler32",
            "./crc32",
            "./inffast",
            "./inftrees",
            "use strict",
            "../utils/common",
            "../utils/common",
            "use strict",
            "need dictionary",
            "stream end",
            "-1",
            "file error",
            "-2",
            "stream error",
            "-3",
            "data error",
            "-4",
            "insufficient memory",
            "-5",
            "buffer error",
            "-6",
            "incompatible version",
            "use strict",
            "../utils/common",
            "../utils/common",
            "use strict",
            "use strict",
            "./lib/utils/common",
            "./lib/deflate",
            "./lib/inflate",
            "./lib/zlib/constants",
            "./lib/deflate",
            "./lib/inflate",
            "./lib/utils/common",
            "./lib/zlib/constants",
        ]
        is_source_matched, score = stringmap.match_source_strings_to_deployed(
            source_strings,
            deployed_strings,
        )
        self.assertTrue(is_source_matched)
        self.assertAlmostEqual(score, 0.6363, places=3)
