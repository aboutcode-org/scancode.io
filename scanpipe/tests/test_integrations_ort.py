# SPDX-License-Identifier: Apache-2.0
#
# http://nexb.com and https://github.com/nexB/scancode.io
# The ScanCode.io software is licensed under the Apache License version 2.0.
# Data generated with ScanCode.io is provided as-is without warranties.
# ScanCode is a trademark of nexB Inc.
#
# You may not use this software except in compliance with the License.
# You may obtain a copy of the License at: http://apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
#
# Data Generated with ScanCode.io is provided on an "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied. No content created from
# ScanCode.io should be considered or used as legal advice. Consult an Attorney
# for any legal advice.
#
# ScanCode.io is a free software code scanning tool from nexB Inc. and others.
# Visit https://github.com/nexB/scancode.io for support and download.

"""
Test suite for validating ScanCode.io integrations with OSS Review Toolkit (ORT).

Each test ensures that SBOM files generated by ORT can be loaded into ScanCode.io

Adding new test data
====================

1. Generate an SBOM with ORT

2. Save the SBOM file under:
    tests/data/integrations-ort/

3. Add expected counts for that SBOM to ``TEST_DATA`` below.

Example:
    "": {
        "resources": 1,
        "packages": 16,
        "packages_vulnerable": 7,
        "dependencies": 25,
        "purls": [
            "pkg:unknown/alpine@3.17.0",
        ],
    },

   Tip: run the test once without expected values, check the counts from the
   failure messages, then update the dictionary accordingly.

4. Run the test suite:

    ./manage.py test scanpipe.tests.test_integrations_ort

5. Commit both the SBOM file and dictionary entry.

"""

from pathlib import Path

from scanpipe.tests.test_integrations_sca_tools import ScanPipeIntegrationsBaseTest

# Mapping of SBOM filenames to expected counts.
# Each SBOM is stored under ``tests/data/integrations-ort/``.
# Keys are filenames, values are dicts with expected numbers of:
# - ``resources``: CodebaseResource
# - ``packages``: DiscoveredPackages
# - ``packages_vulnerable``: Vulnerable DiscoveredPackages
# - ``dependencies``: DiscoveredDependencies
# - ``purls``: The list of PURLs present in the SBOM
TEST_DATA = {
    ## requirements.txt
    #    amqp==5.1.1
    #    appdirs==1.4.4
    #    asgiref==3.5.2
    #    urllib3==1.26.0
    "requirements.txt_bom.cyclonedx.json": {
        "resources": 1,
        "packages": 5,
        "packages_vulnerable": 1,
        "dependencies": 1,
        "purls": [
            "pkg:pypi/amqp@5.1.1",
            "pkg:pypi/appdirs@1.4.4",
            "pkg:pypi/asgiref@3.5.2",
            "pkg:pypi/urllib3@1.26.0",
            "pkg:pypi/vine@5.1.0",
        ],
    },
}


class ScanPipeIntegrationsORTTest(ScanPipeIntegrationsBaseTest):
    """
    Run consistency checks across all SBOM integration test files.

    For each SBOM listed in ``TEST_DATA``, this test:
    - Loads the SBOM into a temporary ScanCode.io project.
    - Executes the ``load_sbom`` pipeline.
    - Verifies that the number of resources, packages, vulnerable packages,
      and dependencies match the expected values.
    """

    data = Path(__file__).parent / "data" / "integrations-ort"

    def test_scanpipe_integrations_ort(self):
        """Loop through all SBOM files and run integration checks."""
        for sbom_filename, expected_results in TEST_DATA.items():
            self._test_scanpipe_sca_integrations_tool(sbom_filename, expected_results)
