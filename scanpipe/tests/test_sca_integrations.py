# SPDX-License-Identifier: Apache-2.0
#
# http://nexb.com and https://github.com/nexB/scancode.io
# The ScanCode.io software is licensed under the Apache License version 2.0.
# Data generated with ScanCode.io is provided as-is without warranties.
# ScanCode is a trademark of nexB Inc.
#
# You may not use this software except in compliance with the License.
# You may obtain a copy of the License at: http://apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
#
# Data Generated with ScanCode.io is provided on an "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied. No content created from
# ScanCode.io should be considered or used as legal advice. Consult an Attorney
# for any legal advice.
#
# ScanCode.io is a free software code scanning tool from nexB Inc. and others.
# Visit https://github.com/nexB/scancode.io for support and download.

"""
Test suite for validating ScanCode.io integrations with third-party SCA SBOM tools.

Each test ensures that SBOM files generated by tools such as Anchore Grype,
CycloneDX (cdxgen), osv-scanner, Trivy, SBOM Tool, and more.

Adding new test data
====================

1. Generate an SBOM with the tool you want to test. For example with Trivy:

    trivy image --scanners vuln,license --format cyclonedx \
        --output trivy-alpine-3.17-sbom.json alpine:3.17.0

2. Save the SBOM file under:
    tests/data/sca-integrations/

3. Add expected counts for that SBOM to ``SCA_INTEGRATIONS_TEST_DATA`` below.

Example:
    "trivy-alpine-3.17-sbom.json": {
        "resources": 1,
        "packages": 16,
        "packages_vulnerable": 7,
        "dependencies": 25,
    },

   Tip: run the test once without expected values, check the counts from the
   failure messages, then update the dictionary accordingly.

4. Run the test suite:

    ./manage.py test scanpipe.tests.test_sca_integrations

5. Commit both the SBOM file and dictionary entry.

"""

from pathlib import Path

from django.test import TestCase

from scanpipe.tests import make_project

# Mapping of SBOM filenames to expected counts.
# Each SBOM is stored under ``tests/data/sca-integrations/``.
# Keys are filenames, values are dicts with expected numbers of:
# - ``resources``: CodebaseResource
# - ``packages``: DiscoveredPackages
# - ``packages_vulnerable``: Vulnerable DiscoveredPackages
# - ``dependencies``: DiscoveredDependencies
SCA_INTEGRATIONS_TEST_DATA = {
    ### Anchore Grype
    #   $ grype -v -o cyclonedx-json \
    #       --file anchore-alpine-3.17-sbom.json alpine:3.17.0
    "anchore-alpine-3.17-sbom.json": {
        "resources": 1,
        "packages": 94,
        "packages_vulnerable": 7,
        "dependencies": 20,
    },
    ### CycloneDX cdxgen
    #   $ cdxgen alpine:3.17.0 --type docker --spec-version 1.6 --json-pretty \
    #       --output cdxgen-alpine-3.17-sbom.json
    "cdxgen-alpine-3.17-sbom.json": {
        "resources": 1,
        "packages": 14,
        "packages_vulnerable": 0,
        "dependencies": 0,
    },
    ### OWASP dep-scan
    #   $ depscan --src alpine:3.17.0 --type docker
    "depscan-alpine-3.17-sbom.json": {
        "resources": 1,
        "packages": 33,
        "packages_vulnerable": 3,
        "dependencies": 20,
    },
    ### OSV-Scanner
    #   $ osv-scanner scan image alpine:3.17.0 \
    #       --all-packages \
    #       --format spdx-2-3 \
    #       --output osv-scanner-alpine-3.17-sbom.spdx.json
    "osv-scanner-alpine-3.17-sbom.spdx.json": {
        "resources": 1,
        "packages": 16,
        "packages_vulnerable": 0,
        "dependencies": 15,
    },
    # Example file from osv-scanner documentation:
    # https://google.github.io/osv-scanner/output/#cyclonedx
    "osv-scanner-vulns-sbom.cdx.json": {
        "resources": 1,
        "packages": 3,
        "packages_vulnerable": 1,
        "dependencies": 0,
    },
    ### SBOM Tool
    #   $ sbom-tool generate -di alpine:3.17.0 \
    #       -pn DockerImage -pv 1.0.0 -ps Company -nsb https://sbom.company.com
    "sbom-tool-alpine-3.17-sbom.spdx.json": {
        "resources": 1,
        "packages": 16,
        "packages_vulnerable": 0,
        "dependencies": 15,
    },
    ### Trivy
    #   $ trivy image --scanners vuln,license --format cyclonedx \
    #       --output trivy-alpine-3.17-sbom.json alpine:3.17.0
    "trivy-alpine-3.17-sbom.json": {
        "resources": 1,
        "packages": 16,
        "packages_vulnerable": 7,
        "dependencies": 25,
    },
}


class ScanPipeSCAIntegrationsTest(TestCase):
    """
    Run consistency checks across all SBOM integration test files.

    For each SBOM listed in ``SCA_INTEGRATIONS_TEST_DATA``, this test:
    - Loads the SBOM into a temporary ScanCode.io project.
    - Executes the ``load_sbom`` pipeline.
    - Verifies that the number of resources, packages, vulnerable packages,
      and dependencies match the expected values.
    """

    data = Path(__file__).parent / "data"

    def test_scanpipe_sca_integrations_tools(self):
        """Loop through all SBOM files and run integration checks."""
        for sbom_filename, expected_results in SCA_INTEGRATIONS_TEST_DATA.items():
            self._test_scanpipe_sca_integrations_tool(sbom_filename, expected_results)

    def _test_scanpipe_sca_integrations_tool(self, sbom_filename, expected_results):
        """Run a single SBOM integration test."""
        input_location = self.data / "sca-integrations" / sbom_filename

        # Create a fresh project and load the SBOM into it
        project = make_project()
        project.copy_input_from(input_location)

        run = project.add_pipeline(pipeline_name="load_sbom")
        pipeline = run.make_pipeline_instance()

        exitcode, out = pipeline.execute()
        # Ensure the SBOM is properly loaded
        self.assertEqual(0, exitcode, msg=out)

        # Verify resource, package, vulnerability, and dependency counts
        self.assertEqual(
            expected_results["resources"],
            project.codebaseresources.count(),
            msg=sbom_filename,
        )
        self.assertEqual(
            expected_results["packages"],
            project.discoveredpackages.count(),
            msg=sbom_filename,
        )
        self.assertEqual(
            expected_results["packages_vulnerable"],
            project.discoveredpackages.vulnerable().count(),
            msg=sbom_filename,
        )
        self.assertEqual(
            expected_results["dependencies"],
            project.discovereddependencies.count(),
            msg=sbom_filename,
        )
