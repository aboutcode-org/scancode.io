# Generated by Django 5.0.2 on 2024-03-17 12:38

import django.db.models.deletion
import scanpipe.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("scanpipe", "0073_add_sha1_git_checksum"),
    ]

    operations = [
        migrations.CreateModel(
            name="DiscoveredLicense",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "compliance_alert",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ok", "Ok"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("missing", "Missing"),
                        ],
                        editable=False,
                        help_text="Indicates how the license expression complies with provided policies.",
                        max_length=10,
                    ),
                ),
                (
                    "license_expression",
                    models.TextField(
                        blank=True,
                        help_text="A license expression string using the SPDX license expression syntax and ScanCode license keys, the effective license expression for this license detection.",
                    ),
                ),
                (
                    "license_expression_spdx",
                    models.TextField(
                        blank=True,
                        help_text="SPDX license expression string with SPDX ids.",
                    ),
                ),
                (
                    "matches",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of license matches combined in this detection.",
                        verbose_name="Reference Matches",
                    ),
                ),
                (
                    "detection_log",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="A list of detection DetectionRule explaining how this detection was created.",
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        blank=True,
                        help_text="An identifier unique for a license detection, containing the license expression and a UUID crafted from the match contents.",
                        max_length=1024,
                    ),
                ),
                (
                    "detection_count",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Total number of this license detection discovered.",
                        null=True,
                    ),
                ),
                (
                    "file_regions",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="A list of file regions with resource path, start and end line details for each place this license detection was discovered at. Also contains whether this license was discovered from a file or from package metadata.",
                        verbose_name="Detection Locations",
                    ),
                ),
                (
                    "is_license_clue",
                    models.BooleanField(
                        default=False,
                        help_text='True if this is not a proper license detection which should be considered in the license_expression for the parent resource/package. A license match is considered as a clue if it could be a possiblefalse positives or the matched rule is tagged as a clue explicitly.',
                    ),
                ),
                (
                    "from_package",
                    models.BooleanField(
                        default=False,
                        help_text='True if this was discovered in a extracted license statement and False if this was discovered in a file.',
                    ),
                ),
                (
                    "needs_review",
                    models.BooleanField(
                        default=False,
                        help_text='True if this was license detection needs to be reviewed as there might be a license detection issue.',
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to="scanpipe.project",
                    ),
                ),
                (
                    "review_comments",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text='A list of review comments for license detection issues which needs review. These descriptive comments are based on ambigous detection types and could also offers helpful suggestions on how to review/report these detection issues.',
                        verbose_name='Review Comments',
                    ),
                ),
            ],
            options={
                "ordering": ["detection_count", "identifier"],
                "indexes": [
                    models.Index(
                        fields=["identifier"], name="scanpipe_di_identif_b533f3_idx"
                    ),
                    models.Index(
                        fields=["license_expression"],
                        name="scanpipe_di_license_33d11a_idx",
                    ),
                    models.Index(
                        fields=["license_expression_spdx"],
                        name="scanpipe_di_license_eb5e9d_idx",
                    ),
                    models.Index(
                        fields=["detection_count"],
                        name="scanpipe_di_detecti_d87ff1_idx",
                    ),
                    models.Index(
                        fields=['is_license_clue'],
                        name='scanpipe_di_is_lice_f4922a_idx'
                    ),
                    models.Index(
                        fields=['from_package'],
                        name='scanpipe_di_from_pa_6485b2_idx'
                    ),
                    models.Index(
                        fields=['needs_review'],
                        name='scanpipe_di_needs_r_5cff82_idx'
                    ),
                ],
            },
            bases=(
                scanpipe.models.UpdateMixin,
                scanpipe.models.SaveProjectMessageMixin,
                scanpipe.models.UpdateFromDataMixin,
                models.Model,
            ),
        ),
        migrations.AddConstraint(
            model_name="discoveredlicense",
            constraint=models.UniqueConstraint(
                condition=models.Q(("identifier", ""), _negated=True),
                fields=("project", "identifier"),
                name="scanpipe_discoveredlicense_unique_license_id_within_project",
            ),
        ),
    ]
